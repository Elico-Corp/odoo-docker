#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

log_src='['${0##*/}']'

function help {
    set +e
    cat bin/help.txt
    set -e
}

function login  {
    echo $log_src[`date +%F.%H:%M:%S`]' Running bash'
    set +e
    if [[ ! -e $1 && $1 = "root" ]]; then
        /bin/bash
    else
        sudo su - odoo
    fi
    SERVICE_PID=$!
    set -e
}

function _update_odoo_conf_params {
    # Loop over all the "ODOO_" ENV variables (see `<<<` after `done`)
    while read -r env_var; do
        # Remove "ODOO_" from ENV variable and convert to lowercase
        odoo_param=${env_var:5}
        odoo_param=${odoo_param,,}

        # Get the value of the corresponding ENV variable and escape slashes
        val=${!env_var}
        val=$( echo $val | sed 's/\//\\\//g')

        # FIXME Should not be an external script (see reason in script header)
        bash /app/bin/update_odoo_param.sh $odoo_user $odoo_conf_file $odoo_param $val

        # Unset the environment variable for security purpose
        unset $env_var
    done <<< "$( printenv | grep '^ODOO_' | sed 's/=.*//g' )"
}

function _setup_ssh_key {
    echo $log_src[`date +%F.%H:%M:%S`]' Setting up SSH key...'

    # Create SSH config folder in $HOME folder of Odoo target user
    ssh_folder=$( getent passwd $odoo_user | cut -d: -f6 )/.ssh
    mkdir $ssh_folder

    # Copy SSH private key from /opt/odoo/ssh
    cp /opt/odoo/ssh/id_rsa $ssh_folder

    echo $log_src[`date +%F.%H:%M:%S`]' Scanning GitHub key...'
    ssh-keyscan github.com > $ssh_folder/known_hosts

    # Setup SSH config
    echo "host github.com" > $ssh_folder/config
    echo "    HostName github.com" >> $ssh_folder/config
    echo "    User git" >> $ssh_folder/config
    echo "    IdentityFile $ssh_folder/id_rsa" >> $ssh_folder/config

    # Secure SSH folder
    chown -R $odoo_user:$odoo_user $ssh_folder
    chmod 400 $ssh_folder/id_rsa

    echo $log_src[`date +%F.%H:%M:%S`]' Setup SSH key done'
}

function _download_addons {
    # 2 reasons to download extra addons:
    #  1) ENV variable ADDONS_REPO is defined
    #  2) There's a file called `oca_dependencies.txt` at the root of extra addons folder
    if [ "$ADDONS_REPO" -o -a /opt/odoo/additional_addons/oca_dependencies.txt ]; then
        # Git config for target user
        sudo -i -u $odoo_user git config --global user.email "webmaster@elico-corp.com"
        sudo -i -u $odoo_user git config --global user.name "Elico Corp - Odoo Docker"

        # Setup SSH key
        if [ -a /opt/odoo/ssh/id_rsa ]; then
            _setup_ssh_key
        fi

        # Always fetch dependencies unless specified
        if [[ -z "$FETCH_OCA_DEPENDENCIES" ]]; then
            FETCH_OCA_DEPENDENCIES=True
        fi

        echo $log_src[`date +%F.%H:%M:%S`]' Downloading additional addons...'
        sudo -i -u $odoo_user python /opt/odoo/auto_addons/addons.py $FETCH_OCA_DEPENDENCIES $ADDONS_REPO
    else
        # No additional addons to download
        sudo -i -u $odoo_user bash /opt/odoo/auto_addons/no_addons.sh $odoo_conf_file
    fi
}

function start {
    echo $log_src[`date +%F.%H:%M:%S`]' Checking special requirements...'
    bash /opt/scripts/startup.sh

    echo $log_src[`date +%F.%H:%M:%S`]' Updating Odoo conf...'
    _update_odoo_conf_params

    # Check if need to download addons repo
    _download_addons

    echo $log_src[`date +%F.%H:%M:%S`]' Running odoo...'
    set +e
    if [ ! -e $1 ]; then
        echo $log_src[`date +%F.%H:%M:%S`]' ...with additional args: ' $*
    fi
    sudo -i -u $odoo_user /usr/bin/python \
                    /opt/odoo/sources/odoo/openerp-server \
                    -c $odoo_conf_file \
                    $*

    SERVICE_PID=$!
    set -e
}

# smart shutdown on SIGINT and SIGTERM
function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}
trap on_exit INT TERM

echo $log_src[`date +%F.%H:%M:%S`]' Searching for target Odoo user...'
# FIXME Should not be an external script (see reason in script header)
bash /app/bin/target_user.sh
odoo_user=$( cat /tmp/odoo_user )
rm -f /tmp/odoo_user

echo $log_src[`date +%F.%H:%M:%S`]' Searching for conf file...'
if [[ -z "$odoo_conf_file" ]]; then
    odoo_conf_file="/opt/odoo/etc/odoo.conf"
fi

echo $log_src[`date +%F.%H:%M:%S`]' Running command...'
for arg in "$*"
do
    $arg
done

wait